import { KeyPair, type KeyPairString } from '@near-js/crypto';
import { KeyStore } from '@near-js/keystores';
import type { AccessKeySigner, MessageSigner, SignerDependency, ViewAccountParams } from '../interfaces';
/**
 * Initialize a message signer from a KeyPair
 * @param keyPair used to sign transactions
 */
export declare function getSignerFromKeyPair(keyPair: KeyPair): MessageSigner;
/**
 * Initialize a message singer from a private key string
 * @param privateKey string representation of the private key used to sign transactions
 */
export declare function getSignerFromPrivateKey(privateKey: KeyPairString): MessageSigner;
/**
 * Initialize a message signer from a keystore instance
 * @param account used to sign transactions
 * @param network to sign transactions on
 * @param keyStore used to store the signing key
 */
export declare function getSignerFromKeystore(account: string, network: string, keyStore: KeyStore): MessageSigner;
/**
 * Initialize a signer that caches the access key and increments the nonce
 * @param account access key owner
 * @param rpcProvider RPC provider instance
 * @param deps sign-and-send dependencies
 */
export declare function getAccessKeySigner({ account, blockReference, deps: { rpcProvider, signer } }: ViewAccountParams & SignerDependency): AccessKeySigner;
//# sourceMappingURL=signers.d.ts.map