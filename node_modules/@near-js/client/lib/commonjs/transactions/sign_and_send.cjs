"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignerNonce = exports.signAndSendTransaction = exports.signTransaction = void 0;
const transactions_1 = require("@near-js/transactions");
const utils_1 = require("@near-js/utils");
const sha256_1 = require("@noble/hashes/sha256");
const view_1 = require("../view.cjs");
const DEFAULT_FINALITY = { finality: 'final' };
/**
 * Sign a transaction, returning the signed transaction and encoded hash
 * @param transaction Transaction instance
 * @param signer MessageSigner
 */
async function signTransaction({ transaction, deps: { signer } }) {
    const encodedTx = transaction.encode();
    const signedTransaction = new transactions_1.SignedTransaction({
        transaction,
        signature: new transactions_1.Signature({
            keyType: transaction.publicKey.keyType,
            data: await signer.signMessage(encodedTx),
        }),
    });
    return {
        encodedTransactionHash: new Uint8Array((0, sha256_1.sha256)(encodedTx)),
        signedTransaction,
    };
}
exports.signTransaction = signTransaction;
/**
 * Sign a transaction and publish to RPC
 * @param transaction Transaction instance to sign and publish
 * @param deps sign-and-send dependencies
 */
async function signAndSendTransaction({ transaction, deps: { rpcProvider, signer } }) {
    const { signedTransaction } = await signTransaction({ transaction, deps: { signer } });
    const outcome = await rpcProvider.sendTransaction(signedTransaction);
    return {
        outcome,
        result: (0, utils_1.getTransactionLastResult)(outcome),
    };
}
exports.signAndSendTransaction = signAndSendTransaction;
/**
 * Get the current nonce for an access key given an account and MessageSigner instance
 * @param account owner of the access key
 * @param blockReference block ID/finality
 * @param rpcProvider RPC provider instance
 * @param deps sign-and-send dependencies
 */
async function getSignerNonce({ account, blockReference = DEFAULT_FINALITY, deps: { rpcProvider, signer } }) {
    return (0, view_1.getNonce)({
        account,
        publicKey: (await signer.getPublicKey()).toString(),
        blockReference,
        deps: { rpcProvider },
    });
}
exports.getSignerNonce = getSignerNonce;
