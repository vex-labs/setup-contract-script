import type { BlockReference, SerializedReturnValue } from '@near-js/types';
import { AccessKeySigner, MessageSigner, MetaTransactionOptions, RpcQueryProvider, SignedTransactionOptions, TransactionOptions } from '../../interfaces';
import { TransactionComposer } from './transaction_composer';
export declare class SignedTransactionComposer extends TransactionComposer {
    messageSigner: MessageSigner;
    rpcProvider: RpcQueryProvider;
    signer: AccessKeySigner;
    constructor({ deps, ...baseOptions }: SignedTransactionOptions);
    /**
     * Initialize the composer
     * @param options signed composer configuration
     */
    static init(options: SignedTransactionOptions): SignedTransactionComposer;
    /**
     * Return a signed delegate action encapsulating the composed transaction for inclusion in a meta transaction
     * @param transaction meta transaction configuration
     */
    toSignedDelegateAction(transaction?: MetaTransactionOptions): Promise<import("@near-js/transactions").SignedDelegate>;
    /**
     * Verify the transaction's signer matches the account mapped to the AccessKeySigner.
     *  Initialize the signer if not already done (i.e. for lazy setting of the transaction signer).
     *  Throw an error if there is a mismatch between the current AccessKeySigner and the transaction's specified signer.
     * @param signingAccount
     * @private
     */
    private verifySigner;
    /**
     * Return a signed transaction from the composed transaction
     * @param transactionOptions transaction configuration to override values set at composer initialization
     */
    toSignedTransaction(transactionOptions?: TransactionOptions): Promise<{
        encodedTransactionHash: Uint8Array;
        signedTransaction: import("@near-js/transactions").SignedTransaction;
    }>;
    /**
     * Sign and send the composed transaction
     * @param blockReference block to use for determining hash
     */
    signAndSend<T extends SerializedReturnValue>(blockReference?: BlockReference): Promise<{
        outcome: import("@near-js/types").FinalExecutionOutcome;
        result: T;
    }>;
}
//# sourceMappingURL=signed_transaction_composer.d.ts.map