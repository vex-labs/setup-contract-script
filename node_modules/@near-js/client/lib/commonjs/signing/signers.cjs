"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessKeySigner = exports.getSignerFromKeystore = exports.getSignerFromPrivateKey = exports.getSignerFromKeyPair = void 0;
const crypto_1 = require("@near-js/crypto");
const signers_1 = require("@near-js/signers");
const view_1 = require("../view.cjs");
/**
 * Initialize a message signer from a KeyPair
 * @param keyPair used to sign transactions
 */
function getSignerFromKeyPair(keyPair) {
    return {
        async getPublicKey() {
            return keyPair.getPublicKey();
        },
        async signMessage(m) {
            return keyPair.sign(m).signature;
        }
    };
}
exports.getSignerFromKeyPair = getSignerFromKeyPair;
/**
 * Initialize a message singer from a private key string
 * @param privateKey string representation of the private key used to sign transactions
 */
function getSignerFromPrivateKey(privateKey) {
    return getSignerFromKeyPair(crypto_1.KeyPair.fromString(privateKey));
}
exports.getSignerFromPrivateKey = getSignerFromPrivateKey;
/**
 * Initialize a message signer from a keystore instance
 * @param account used to sign transactions
 * @param network to sign transactions on
 * @param keyStore used to store the signing key
 */
function getSignerFromKeystore(account, network, keyStore) {
    const signer = new signers_1.InMemorySigner(keyStore);
    return {
        async getPublicKey() {
            return signer.getPublicKey(account, network);
        },
        async signMessage(m) {
            const { signature } = await signer.signMessage(m, account, network);
            return signature;
        }
    };
}
exports.getSignerFromKeystore = getSignerFromKeystore;
/**
 * Initialize a signer that caches the access key and increments the nonce
 * @param account access key owner
 * @param rpcProvider RPC provider instance
 * @param deps sign-and-send dependencies
 */
function getAccessKeySigner({ account, blockReference, deps: { rpcProvider, signer } }) {
    let accessKey;
    let nonce;
    return {
        async getAccessKey(ignoreCache = false) {
            if (!accessKey || ignoreCache) {
                accessKey = await (0, view_1.getAccessKey)({
                    account,
                    blockReference: blockReference || { finality: 'optimistic' },
                    publicKey: (await signer.getPublicKey()).toString(),
                    deps: { rpcProvider },
                });
                nonce = accessKey.nonce + 1n;
            }
            return accessKey;
        },
        async getNonce(ignoreCache = false) {
            if (!nonce || ignoreCache) {
                await this.getAccessKey(true);
            }
            return nonce;
        },
        getPublicKey() {
            return signer.getPublicKey();
        },
        getSigningAccount() {
            return account;
        },
        signMessage(m) {
            nonce += 1n;
            return signer.signMessage(m);
        }
    };
}
exports.getAccessKeySigner = getAccessKeySigner;
